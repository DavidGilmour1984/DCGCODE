<!DOCTYPE html>
<html>
<head>
  <title>Vertical Circular Motion Simulator</title>
  <style>
    body {
      font-family: Helvetica, sans-serif;
      background-color: #f5f5f5;
      padding: 0.5em;
      text-align: center;
    }
    .container {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      gap: 2em;
      flex-wrap: wrap;
    }
    .card {
      background: white;
      padding: 1.5em;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      max-width: 1600px;
      margin: auto;
    }
    canvas {
      background-color: #ffffff;
      border: none;
      border-radius: 12px;
    }
    label {
      font-weight: bold;
      margin-right: 10px;
    }
    input[type="number"] {
      width: 70px;
      padding: 0.4em;
      border-radius: 6px;
      border: 1px solid #ccc;
      font-size: 1rem;
      margin-right: 10px;
    }
    button {
      margin-top: 1em;
      padding: 0.5em 1.6em;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      background-color: #28a745;
      color: white;
      transition: background 0.3s;
    }
    button:hover {
      background-color: #218838;
    }
    table {
      border-collapse: collapse;
      width: 300px;
      margin-top: 1em;
    }
    td, th {
      border: 1px solid #ccc;
      padding: 8px 12px;
      font-size: 1rem;
    }
    th {
      background-color: #e9ecef;
    }
    .slider {
      width: 10%;
    }
    .formulas {
      margin-top: 1em;
      background-color: #fff;
      padding: 1em;
      border-radius: 10px;
      font-size: 1rem;
      text-align: left;
      border: 1px solid #ccc;
      max-width: 600px;
    }
    .formulas h3 {
      margin-top: 0;
    }
  </style>
</head>
<body>
  <div class="card">
    <h2>Vertical Circular Motion Simulator</h2>
    <div style="margin-bottom: 1em;">
      <label>Bottom Speed (ms<sup>-1</sup>):</label>
      <input type="number" id="bottomSpeed" value="22.15" step="0.1" min="0.1">
      <label>Radius (m):</label>
      <input type="number" id="radius" value="10" step="1" min="1">
      <button onclick="startSimulation()">Start</button>
      <label for="speedSlider">Rate:</label>
      <input type="range" id="speedSlider" class="slider" min="0.0" max="1" value="1" step="0.1">
      <span id="speedValue">1.0x</span>
    </div>
    <div class="container">
      <div>
        <canvas id="simCanvas" width="600" height="500"></canvas>
      </div>
      <div>
        <table>
          <tr><th>Parameter</th><th>Value</th></tr>
          <tr><td>Potential Energy (EP)</td><td id="epCell">-</td></tr>
          <tr><td>Kinetic Energy (EK)</td><td id="ekCell">-</td></tr>
          <tr><td>Min Speed at Top</td><td id="minSpeedTop">-</td></tr>
          <tr><td>Min Speed at Bottom</td><td id="minSpeedBottom">-</td></tr>
          <tr><td>Speed (ms<sup>-1</sup>)</td><td id="speedCell">-</td></tr>
          <tr><td>Mass (kg)</td><td id="massCell">1</td></tr>
        </table>
        <div class="formulas" id="fcFormula">
          <h3>Centripetal Force Calculation</h3>
          <p>Fc = m &times; v&sup2; / r</p>
          <p>Fc = 1 &times; (0)&sup2; / 10</p>
          <p>Fc = 0.00 N</p>
        </div>
        <div class="formulas" id="energyFormula">
          <h3>Total Mechanical Energy</h3>
          <p>E = (0.5 &times; m &times; v&sup2;) + (m &times; g &times; h)</p>
          <p>E = 0.5 &times; 1 &times; (0)&sup2; + 1 &times; 9.81 &times; h</p>
          <p>E = 0.00 J</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    const canvas = document.getElementById('simCanvas');
    const ctx = canvas.getContext('2d');

    let angle = 0;
    let radius = 10;
    const displayRadius = 200;
    let centerX = canvas.width / 2;
    let centerY = canvas.height / 2;
    let speedBottom = 22.15;
    const g = 9.81;
    const m = 1;
    let animationId = null;
    let objectOffTrack = false;
    let direction = 1;
    let forceScale = 3.5;
    let totalEnergy = 0;

    const speedSlider = document.getElementById('speedSlider');
    const speedValue = document.getElementById('speedValue');
    let speedFactor = 1;

    speedSlider.addEventListener('input', () => {
      speedFactor = parseFloat(speedSlider.value);
      speedValue.textContent = `${speedFactor.toFixed(1)}x`;
    });

    function calculateSpeed(theta) {
      const h = radius * (1 - Math.cos(theta));
      const pe = m * g * h;
      const ke = totalEnergy - pe;
      return ke > 0 ? Math.sqrt((2 * ke) / m) : 0;
    }

    function updateTable(theta, v) {
      const h = radius * (1 - Math.cos(theta));
      const ep = m * g * h;
      const ek = 0.5 * m * v ** 2;
      const minSpeedTop = Math.sqrt(g * radius);
      const minSpeedBottom = Math.sqrt(5 * g * radius);

      document.getElementById('epCell').innerText = ep.toFixed(2);
      document.getElementById('ekCell').innerText = ek.toFixed(2);
      document.getElementById('minSpeedTop').innerText = minSpeedTop.toFixed(2);
      document.getElementById('minSpeedBottom').innerText = minSpeedBottom.toFixed(2);
      document.getElementById('speedCell').innerHTML = v.toFixed(2) + " ms<sup>-1</sup>";
    }

    function updateFcFormula(v) {
      const fc = (m * v * v) / radius;
      const formulaEl = document.getElementById("fcFormula");
      formulaEl.innerHTML = `
        <h3>Centripetal Force Calculation</h3>
        <p>Fc = m &times; v&sup2; / r</p>
        <p>Fc = ${m} &times; (${v.toFixed(2)})&sup2; / ${radius}</p>
        <p>Fc = ${fc.toFixed(2)} N</p>
      `;
    }

    function updateEnergyFormula(v, theta) {
      const h = radius * (1 - Math.cos(theta));
      const pe = m * g * h;
      const ke = 0.5 * m * v * v;
      const total = pe + ke;

      document.getElementById("energyFormula").innerHTML = `
        <h3>Total Mechanical Energy</h3>
        <p>E = (0.5 &times; m &times; v&sup2;) + (m &times; g &times; h)</p>
        <p>E = 0.5 &times; ${m} &times; (${v.toFixed(2)})&sup2; + ${m} &times; ${g} &times; ${h.toFixed(2)}</p>
        <p>E = ${total.toFixed(2)} J</p>
      `;
    }

    function drawArrow(x, y, dx, dy, color, label, lineWidth = 2) {
      const angle = Math.atan2(dy, dx);
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x + dx, y + dy);
      ctx.strokeStyle = color;
      ctx.lineWidth = lineWidth;
      ctx.stroke();

      ctx.beginPath();
      ctx.moveTo(x + dx, y + dy);
      ctx.lineTo(x + dx - 6 * Math.cos(angle - Math.PI / 6), y + dy - 6 * Math.sin(angle - Math.PI / 6));
      ctx.lineTo(x + dx - 6 * Math.cos(angle + Math.PI / 6), y + dy - 6 * Math.sin(angle + Math.PI / 6));
      ctx.closePath();
      ctx.fillStyle = color;
      ctx.fill();

      if (label) {
        ctx.font = "14px Helvetica";
        ctx.fillStyle = color;
        ctx.fillText(label, x + dx + 5, y + dy + 5);
      }
    }

    function drawLoop(theta, v) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      ctx.beginPath();
      ctx.arc(centerX, centerY, displayRadius, 0, 2 * Math.PI);
      ctx.strokeStyle = "#aaa";
      ctx.lineWidth = 2;
      ctx.stroke();

      const x = centerX + displayRadius * Math.sin(theta);
      const y = centerY + displayRadius * Math.cos(theta);

      ctx.beginPath();
      ctx.arc(x, y, 10, 0, 2 * Math.PI);
      ctx.fillStyle = objectOffTrack ? "red" : "#007BFF";
      ctx.fill();

      if (objectOffTrack) {
        ctx.fillStyle = "red";
        ctx.font = "bold 20px Helvetica";
        ctx.fillText("Ball fell off the track!", 20, 60);
      }

      updateTable(theta, v);
      updateFcFormula(v);
      updateEnergyFormula(v, theta);

      if (!objectOffTrack) {
        const dirX = Math.sin(theta);
        const dirY = Math.cos(theta);
        const weight = m * g;
        const centripetal = m * v * v / radius;
        const normal = centripetal + weight * Math.cos(theta);
        const centripetalVector = normal - weight * Math.cos(theta);

        drawArrow(x, y, 0, weight * forceScale, "red", "Weight");
        drawArrow(x, y, -dirX * normal * forceScale, -dirY * normal * forceScale, "green", "Normal");
        drawArrow(x, y, -dirX * centripetalVector * forceScale, -dirY * centripetalVector * forceScale, "blue", "Centripetal");
      }
    }

    function startSimulation() {
      cancelAnimationFrame(animationId);
      radius = parseFloat(document.getElementById('radius').value);
      speedBottom = parseFloat(document.getElementById('bottomSpeed').value);
      totalEnergy = 0.5 * m * speedBottom * speedBottom;
      angle = 0;
      objectOffTrack = false;
      direction = 1;

      function animate() {
        const v = calculateSpeed(angle);
        const weight = m * g;
        const centripetal = m * v * v / radius;
        const normal = centripetal + weight * Math.cos(angle);

        if (normal <= 0) {
          objectOffTrack = true;
          drawLoop(angle, v);
          return;
        }

        const angularSpeed = v / radius;
        angle += direction * angularSpeed * 0.016 * speedFactor;

        if (angle < 0) {
          angle = 0;
          direction = 1;
        } else if (angle >= 2 * Math.PI) {
          angle -= 2 * Math.PI;
        }

        drawLoop(angle, v);
        animationId = requestAnimationFrame(animate);
      }

      animate();
    }
  </script>
</body>
</html>
