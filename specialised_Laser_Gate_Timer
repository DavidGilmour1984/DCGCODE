<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi COM Port Data Streaming</title>
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Laser Gate Timer</title>
    <style>
        body {
            font-family: Helvetica, sans-serif;
            text-align: left;
            display: flex;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }
        .sidebar {
            width: 25%;
            padding: 20px;
            background: #333;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .sidebar label, .sidebar input, .sidebar button {
            width: 100%;
            margin-bottom: 10px;
        }
        .sidebar button {
            font-size: 18px;
            padding: 10px;
            background: #444;
            color: white;
            border: none;
            cursor: pointer;
        }
        .sidebar button:hover {
            background: #555;
        }
        .main {
            width: 75%;
            display: flex;
            flex-direction: column;
            align-items: top;
            justify-content: top;
            padding: 20px;
        }
        .button-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            width: 100%;
        }
        .sensor-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        button {
            font-size: 20px;
            padding: 12px;
            width: 200px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            background: #ff0000;
            color: white;
        }
        button:hover {
            background: #9bf589;
        }
        .active {
            background-color: green !important;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #ddd;
        }
        .sidebar input {
            width: 100%;
            padding: 8px;
            font-size: 16px;
            border: 1px solid white;
            background: #555;
            color: white;
            border-radius: 5px;
            text-align: center;
        }
        .sidebar input::placeholder {
            color: #ccc;
            opacity: 0.7;
        }
        .sidebar table {
            width: 100%;
        }
        .sidebar th, .sidebar td {
            border: 1px solid white;
        }
.timer {
    border: 2px solid black;
    width: 200px;
    height: 43px;
    font-size: 30px;
    text-align: center;
    justify-content: center;
    align-items: center;
    display: flex; /* Ensure Flexbox properties are applied */
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h2>Laser Gate Timer</h2>
        <label for="samplingInterval">Sampling Interval (seconds):</label>
        <input type="number" id="samplingInterval" placeholder="Sampling Interval" min="0.05" value="0.05">
        <label for="threshold">Trigger Threshold:</label>
        <input type="number" id="threshold" placeholder="Threshold" min="0" value="200">
        <button onclick="clearTimer()">Clear Timer</button>
        <button onclick="saveTrial()">Save Trial</button> <!-- Added Save Trial button -->
        <label for="csvName">CSV Name:</label>
        <input type="text" id="csvName" placeholder="Enter CSV Name">
        <button onclick="exportData()">Export Data</button>
        <button onclick="clearTrials()">Clear Trials</button>
    </div>
    <div class="main">
        <div class="button-container">
            <div class="timer" id="timer">Timer: 0.00 </div>
            <div class="sensor-group"><button id="btn1" onclick="connectPort(1)">Sensor 1</button><div id="container1"></div></div>
            <div class="sensor-group"><button id="btn2" onclick="connectPort(2)">Sensor 2</button><div id="container2"></div></div>
        </div>
        <div class="results-container">
            <table id="resultsTable">
                <thead>
                    <tr>
                        <th>Trial</th>
                        <th>Time (seconds)</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script>
        let ports = {};
        const sensorTypes = {
            'G': { name: 'Connected' }
        };

        let timerStart = null;
        let timerInterval = null;
        let timerStopped = false;
        let trialCount = 0;
        let buffer = "";

        async function connectPort(portNumber) {
            try {
                const port = await navigator.serial.requestPort();
                await port.open({ baudRate: 115200 });
                ports[portNumber] = port;
                document.getElementById(`btn${portNumber}`).classList.add("active");
                readSerialData(port, portNumber);
            } catch (error) {
                console.error("Error opening port:", error);
            }
        }

        async function readSerialData(port, portNumber) {
            const reader = port.readable.getReader();
            let decoder = new TextDecoder();
            let tableId = `table${portNumber}`;
            let container = document.getElementById(`container${portNumber}`);

            let table = document.createElement("table");
            table.id = tableId;
            table.innerHTML = `<thead><tr><th>Time (s)</th><th>Data</th></tr></thead><tbody><tr></tr></tbody>`;
            container.innerHTML = "";
            container.appendChild(table);

            try {
                while (true) {
                    const { value, done } = await reader.read();
                    if (done) break;

                    buffer += decoder.decode(value);
                    let lines = buffer.split('\n');
                    buffer = lines.pop();

                    for (let line of lines) {
                        let values = line.trim().split(',');
                        if (values.length === 3 && values[2].trim() === 'G') {
                            let time = (parseInt(values[0]) / 1000).toFixed(2);
                            let sensorValue = parseFloat(values[1]).toFixed(2);
                            let sensorType = values[2].trim();

                            if (sensorTypes[sensorType]) {
                                document.getElementById(`btn${portNumber}`).textContent = sensorTypes[sensorType].name;
                                table.querySelector("thead tr").innerHTML = `<th>Time (s)</th><th>${sensorTypes[sensorType].name}</th>`;
                                addToTable(table, time, sensorValue);
                                handleSensorData(sensorValue, portNumber);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error("Read error:", error);
            } finally {
                reader.releaseLock();
            }
        }

        function addToTable(table, time, value) {
            let tbody = table.querySelector("tbody");
            tbody.innerHTML = `<tr><td>${time}</td><td>${value}</td></tr>`;
        }

        function clearTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            timerStopped = false;
            timerStart = null;
            document.getElementById("timer").textContent = `Timer: 0.00`;

            const samplingInterval = document.getElementById("samplingInterval").value;
            sendSamplingInterval(`1,${samplingInterval}`);
        }

        function clearTrials() {
            const table = document.getElementById("resultsTable").querySelector("tbody");
            table.innerHTML = "";
            trialCount = 0;
        }

        function sendSamplingInterval(data) {
            Object.values(ports).forEach(port => {
                const writer = port.writable.getWriter();
                writer.write(new TextEncoder().encode(data + "\n"));
                writer.releaseLock();
            });
        }

        function handleSensorData(sensorValue, portNumber) {
            const threshold = document.getElementById("threshold").value;
            if (!timerStopped) {
                if (portNumber === 1 && sensorValue < threshold && !timerStart) {
                    timerStart = Date.now();
                    timerInterval = setInterval(updateTimer, 50);  // Interval set to 50 milliseconds
                } else if (portNumber === 2 && sensorValue < threshold && timerStart) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                    timerStopped = true;
                    updateTimer();  // Ensure the final time is displayed
                }
            }
        }

        function updateTimer() {
            if (timerStart) {
                const currentTime = Date.now();
                const elapsedTime = ((currentTime - timerStart) / 1000).toFixed(2);
                document.getElementById("timer").textContent = `Timer: ${elapsedTime}`;
            }
        }

        function saveTrial() {
            const elapsedTime = document.getElementById("timer").textContent.split(": ")[1].split(" ")[0];
            trialCount++;
            const table = document.getElementById("resultsTable").querySelector("tbody");
            const row = table.insertRow();
            const trialCell = row.insertCell(0);
            const timeCell = row.insertCell(1);
            trialCell.textContent = trialCount;
            timeCell.textContent = elapsedTime;
        }

        function exportData() {
            const csvName = document.getElementById("csvName").value || "data";
            const table = document.getElementById("resultsTable");
            const rows = table.querySelectorAll("tr");
            let csvContent = "";

            rows.forEach(row => {
                const cells = row.querySelectorAll("th, td");
                const rowData = Array.from(cells).map(cell => cell.textContent).join(",");
                csvContent += rowData + "\n";
            });

            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `${csvName}.csv`;
            a.click();
            URL.revokeObjectURL(url);
        }
    </script>
</body>



</html>
