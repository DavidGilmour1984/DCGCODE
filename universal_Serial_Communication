<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serial Port Data Reader</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .container {
            max-width: 800px;
            margin: auto;
            padding: 2rem;
            text-align: center;
            background-color: #f3f4f6;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .heading {
            font-size: 2.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #1f2937;
        }
        .input-group {
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .label {
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
            width: 100%;
            display: block;
            text-align: left;
        }
        .value-display {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #d1d5db;
            font-family: monospace;
            font-size: 1.25rem;
            text-align: center;
            background-color: #f9fafb;
            color: #4b5563;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);
            margin-bottom: 1rem;
            min-height: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            word-wrap: break-word; /* Add this */
            white-space: pre-wrap;
        }
        .command-input {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #d1d5db;
            font-size: 1rem;
            margin-bottom: 1rem;
            background-color: #fff;
            color: #4b5563;
        }
        .button {
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .button:hover {
            background-color: #45a049;
        }
        .button:disabled {
            background-color: #a0aec0;
            cursor: not-allowed;
            opacity: 0.7;
            box-shadow: none;
        }
        #connectButton {
            margin-top: 0;
        }
        #port-status {
            margin-top: 1rem;
            font-weight: 600;
            color: #1f2937;
        }
        .error-message {
            color: #dc2626;
            margin-top: 0.5rem;
            font-size: 0.875rem;
            font-weight: 400;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }
        th, td {
            border: 1px solid #d1d5db;
            padding: 0.5rem;
            text-align: center;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
<div class="container">
    <h1 class="heading">Serial Port Data Reader</h1>

    <div class="input-group items-start"> 
        <div class="flex items-start w-full space-x-4">
            <label for="valueDisplay" class="label w-auto mt-1">Latest Value:</label>
            <div id="valueDisplay" class="value-display flex-1"></div>
        </div>

        <div class="flex items-start space-x-4 mt-2">
            <button id="connectButton" class="button" onclick="connectToSerialPort()">Connect to Serial Port</button>
            <div id="port-status" class="font-semibold text-gray-800 mt-1">Port Status: <span id="status-text">Disconnected</span></div>
        </div>

        <div id="error-message" class="error-message mt-2"></div>
    </div>


        <table>
            <thead>
                <tr>
                    <th>Command</th>
                    <th>Send</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="text" id="commandInput1" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(1)">Send 1</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput2" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(2)">Send 2</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput3" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(3)">Send 3</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput4" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(4)">Send 4</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput5" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(5)">Send 5</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput6" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(6)">Send 6</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput7" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(7)">Send 7</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput8" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(8)">Send 8</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput9" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(9)">Send 9</button></td>
                </tr>
                <tr>
                    <td><input type="text" id="commandInput10" class="command-input"></td>
                    <td><button class="button" onclick="sendCommand(10)">Send 10</button></td>
                </tr>
            </tbody>
        </table>

    </div>
    <script>
        let port = null;
        let writer = null;
        let reader = null;
        let isConnected = false;
        const connectButton = document.getElementById('connectButton');
        const valueDisplay = document.getElementById('valueDisplay');
        const portStatus = document.getElementById('status-text');
        const errorMessageDisplay = document.getElementById('error-message');
        const BUFFER_SIZE = 4096;
        let buffer = new Uint8Array(BUFFER_SIZE);
        let bufferIndex = 0;
        let partialData = '';

        if (!('serial' in navigator)) {
            navigator.serial = {
                getPorts: async () => [],
                requestPort: async () => {
                    throw new Error('Web Serial API not supported in this browser. Try Chrome version 89 or later.');
                },
            };
        }

        async function connectToSerialPort() {
            if (isConnected) {
                disconnectFromSerialPort();
                return;
            }
            try {
                connectButton.disabled = true;
                errorMessageDisplay.textContent = '';
                port = await navigator.serial.requestPort();
                if (!port) {
                    throw new Error('No port selected.');
                }
                await port.open({ baudRate: 115200 });
                if (!port.readable) {
                    throw new Error('Selected port is not readable.');
                }
                reader = port.readable.getReader();
                writer = port.writable.getWriter();
                isConnected = true;
                connectButton.textContent = 'Disconnect';
                portStatus.textContent = 'Connected';
                portStatus.style.color = '#22c55e';
                connectButton.disabled = false;
                readLoop();
            } catch (error) {
                isConnected = false;
                connectButton.disabled = false;
                connectButton.textContent = 'Connect to Serial Port';
                portStatus.textContent = 'Disconnected';
                portStatus.style.color = '#f87171';
                errorMessageDisplay.textContent = `Error: ${error.message}`;
                console.error('Connection error:', error);
                if (port) {
                    await port.close();
                }
                port = null;
                reader = null;
                writer = null;
            }
        }
        async function sendCommand(commandNumber) {
            const commandInput = document.getElementById(`commandInput${commandNumber}`);
            const command = commandInput.value + '\n';
            if (isConnected && writer) {
                try {
                    const encoder = new TextEncoder();
                    await writer.write(encoder.encode(command));
                    // Do not clear the input value
                    // commandInput.value = '';
                } catch (error) {
                    errorMessageDisplay.textContent = `Error sending command: ${error.message}`;
                    console.error('Error sending command:', error);
                }
            } else {
                errorMessageDisplay.textContent = 'Not connected to a serial port.';
            }
        }

        async function readLoop() {
            if (!isConnected || !reader) {
                return;
            }
            while (true) {
                try {
                    const { value, done } = await reader.read();
                    if (done) {
                        console.log('Reader done, exiting readLoop');
                        break;
                    }
                    if (value) {
                        processData(value);
                    }
                } catch (error) {
                    console.error('Error reading from serial port:', error);
                    errorMessageDisplay.textContent = `Error reading data: ${error.message}`;
                    await disconnectFromSerialPort();
                    break;
                }
            }
        }

        function processData(data) {
            const textDecoder = new TextDecoder();
            let dataString = textDecoder.decode(data);
            dataString = partialData + dataString;
            const lines = dataString.split('\n');
            partialData = lines.pop();
            for (const line of lines) {
                if (line.trim()) {
                    valueDisplay.textContent = line.trim();
                }
            }
        }

        async function disconnectFromSerialPort() {
            try {
                if (reader) {
                    await reader.cancel();
                    reader = null;
                }
                if (writer) {
                    await writer.close();
                    writer = null;
                }
                if (port) {
                    await port.close();
                    port = null;
                }
                isConnected = false;
                connectButton.textContent = 'Connect to Serial Port';
                portStatus.textContent = 'Disconnected';
                portStatus.style.color = '#f87171';
                connectButton.disabled = false;
            } catch (error) {
                console.error('Error disconnecting:', error);
                errorMessageDisplay.textContent = `Error disconnecting: ${error.message}`;
            }
        }

        window.addEventListener('beforeunload', () => {
            if (isConnected) {
                disconnectFromSerialPort();
            }
        });
    </script>
</body>
</html>
