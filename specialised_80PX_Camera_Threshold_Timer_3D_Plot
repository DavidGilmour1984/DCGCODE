<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COM Port Connection</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        .container {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin-bottom: 20px;
        }
        .tableContainer {
            display: inline-block;
        }
        table {
            border-collapse: collapse;
            margin: 0 auto;
        }
        td {
            width: 40px;
            height: 40px;
            border: 1px solid black;
            vertical-align: middle;
            font-size: 12px;
            color: #000;
        }
        #status {
            margin: 10px 0;
            font-weight: bold;
        }
        #controlPanel {
            margin: 20px;
        }
        #thresholdInput {
            width: 60px;
        }
        #graphContainer {
            width: 100%;
            height: 400px;
            margin-top: 40px;
        }
    </style>
</head>
<body>
    <h1>Connect to COM Port</h1>
    <button id="connectBtn">Connect to COM Port</button>
    <button id="calibrateBtn" style="margin-top: 10px;">White Calibration</button>
    <div id="status"></div>

    <div class="container">
        <div class="tableContainer">
            <h2>Data Table</h2>
            <table id="dataTable">
                <tbody>
                    <!-- Dynamically filled rows -->
                </tbody>
            </table>
        </div>
        <div class="tableContainer">
            <h2>Threshold Timing Table</h2>
            <table id="timingTable">
                <tbody>
                    <!-- Dynamically filled timing rows -->
                </tbody>
            </table>
        </div>
    </div>

    <div id="controlPanel">
        <input type="number" id="thresholdInput" placeholder="Threshold Value">
        <button id="startPauseBtn">Start/Pause</button>
        <button id="clearBtn">Clear</button>
    </div>

    <div id="graphContainer"></div>

    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        const connectBtn = document.getElementById('connectBtn');
        const calibrateBtn = document.getElementById('calibrateBtn');
        const statusDiv = document.getElementById('status');
        const dataTable = document.getElementById('dataTable');
        const timingTable = document.getElementById('timingTable');
        const startPauseBtn = document.getElementById('startPauseBtn');
        const clearBtn = document.getElementById('clearBtn');
        const thresholdInput = document.getElementById('thresholdInput');
        const graphContainer = document.getElementById('graphContainer');

        let port;
        let csvData = []; 
        let calibrationFactors = Array(80).fill(0); 
        let isTiming = false; 
        let timingData = Array(80).fill(0);

        connectBtn.addEventListener('click', async () => {
            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 115200 });
                statusDiv.textContent = 'Connected to COM Port';
                readSerialData();
            } catch (error) {
                statusDiv.textContent = 'Failed to connect: ' + error.message;
            }
        });

        calibrateBtn.addEventListener('click', () => {
            calibrateValues();
        });

        startPauseBtn.addEventListener('click', () => {
            isTiming = !isTiming;
            if (isTiming) {
                startTiming();
            }
        });

        clearBtn.addEventListener('click', () => {
            timingData.fill(0);
            updateTimingTable();
        });

        async function readSerialData() {
            const decoder = new TextDecoderStream();
            const readableStreamClosed = port.readable.pipeTo(decoder.writable);
            const reader = decoder.readable.getReader();

            let buffer = '';

            while (true) {
                const { value, done } = await reader.read();
                if (done) break;

                buffer += value;
                let lines = buffer.split('\n');
                buffer = lines.pop();

                for (let line of lines) {
                    if (line) {
                        const data = line.trim().split(',');
                        if (data.length >= 80) {
                            csvData = data.slice(0, 80); 
                            updateTable(csvData);
                        }
                    }
                }
            }
        }

        function updateTable(data) {
            dataTable.innerHTML = '';
            const rows = 8;
            const cols = 10;

            for (let i = 0; i < rows; i++) {
                const tr = document.createElement('tr');
                for (let j = cols - 1; j >= 0; j--) { 
                    const td = document.createElement('td');
                    const index = (j * rows + i);
                    let value = 0;
                    if (index < data.length) {
                        value = Number(data[index]) + calibrationFactors[index];
                        td.textContent = value.toFixed(1);
                    } else {
                        td.textContent = '';
                    }
                    const grayscale = Math.min(Math.round((value / 800) * 255), 255);
                    td.style.backgroundColor = `rgb(${grayscale}, ${grayscale}, ${grayscale})`;
                    tr.appendChild(td);
                }
                dataTable.appendChild(tr);
            }
        }

        function updateTimingTable() {
            timingTable.innerHTML = '';
            const rows = 8;
            const cols = 10;

            for (let i = 0; i < rows; i++) {
                const tr = document.createElement('tr');
                for (let j = cols - 1; j >= 0; j--) { 
                    const td = document.createElement('td');
                    const index = (j * rows + i);
                    const value = timingData[index];

                    td.textContent = value.toFixed(1);
                    td.style.backgroundColor = getGreenColor(value);
                    tr.appendChild(td);
                }
                timingTable.appendChild(tr);
            }
        }

        function getGreenColor(value) {
            const maxValue = Math.max(...timingData);
            const normalizedValue = maxValue > 0 ? value / maxValue : 0;
            const green = Math.round(normalizedValue * 255);
            return `rgb(0, ${green}, 0)`;
        }

        function startTiming() {
            const thresholdValue = parseFloat(thresholdInput.value);
            if (isNaN(thresholdValue)) {
                alert('Please enter a valid threshold value.');
                return;
            }

            const interval = setInterval(() => {
                if (!isTiming) {
                    clearInterval(interval);
                    return;
                }

                csvData.forEach((value, index) => {
                    const numericValue = Number(value);
                    const calibratedValue = numericValue + calibrationFactors[index];
                    if (calibratedValue >= 5 && calibratedValue < thresholdValue) {
                        timingData[index] += 0.1;
                    }
                });
                updateTimingTable();
                plotGraph();
            }, 100);
        }

        function calibrateValues() {
            if (csvData.length === 0) {
                alert('No data available for calibration.');
                return;
            }

            const numericValues = csvData.map(Number);
            const maxValue = Math.max(...numericValues);
            calibrationFactors = numericValues.map(value => maxValue - value);
            updateTable(csvData);
        }

        function plotGraph() {
    const zData = [];
    for (let i = 0; i < 8; i++) {
        const row = [];
        for (let j = 0; j < 10; j++) {
            row.push(timingData[i + j * 8]);
        }
        zData.push(row);
    }

    const data = [{
        z: zData,
        type: 'surface'
    }];

    const layout = {
        title: 'Threshold Timing Surface Plot',
        autosize: true,
        height: 400,
        margin: { l: 50, r: 50, b: 0, t: 50 },
        scene: {
            aspectratio: { x: 3, y: 3, z: 1 },  // Scale X and Z axes to be twice the Y axis size
            xaxis: { title: 'X Axis' },
            yaxis: { title: 'Y Axis' },
            zaxis: { title: 'Z Axis' }
        }
    };

    Plotly.newPlot(graphContainer, data, layout);
}

    </script>
</body>
</html>
