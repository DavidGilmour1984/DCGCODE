<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>2D Collision Simulator with Calculations</title>
  <style>
    body {
      font-family: Helvetica, sans-serif;
      background-color: #f5f5f5;
      padding: 2em;
      margin: 0;
      text-align: center;
    }
    .card {
      background: white;
      padding: 2em;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      max-width: 1200px;
      margin: auto;
      display: flex;
      justify-content: space-between;
      gap: 2em;
    }
    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    canvas {
      background: #f0f0f0;
      border: 1px solid #ccc;
      border-radius: 12px;
      margin-top: 20px;
    }
    table.control-table {
      font-size: 1em;
      border-collapse: collapse;
    }
    .control-table th, .control-table td {
      padding: 4px 8px;
    }
    input[type="number"] {
      width: 50px;
      font-size: 1em;
      text-align: center;
    }
    .control-row {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 10px;
    }
    button {
      font-size: 1em;
      padding: 6px 14px;
      border: none;
      border-radius: 8px;
      background-color: #4caf50;
      color: white;
      cursor: pointer;
    }
    .calculation {
      background: #eef0f3;
      padding: 1em;
      border-radius: 8px;
      margin-top: 10px;
      white-space: pre-wrap;
      font-family: monospace;
      text-align: left;
      width: 100%;
      max-width: 380px;
      min-height: 220px;
    }
    h2 { margin: 0.5em 0; }
  </style>
</head>
<body>

<div class="card">
  <!-- Left: controls + simulation -->
  <div class="column">
    <h2>2D Collision Simulator</h2>
    <div class="control-row">
      <button onclick="startSimulation()">Start Simulation</button>
      <table class="control-table">
        <tr><th></th><th>Mass (kg)</th><th>Speed (m‚ÄØs‚Åª¬π)</th></tr>
        <tr>
          <td>üî¥</td>
          <td><input id="massA" type="number" value="2" min="0.1" step="0.1"></td>
          <td><input id="speedA" type="number" value="2" min="0.1" step="0.1"></td>
        </tr>
        <tr>
          <td>üîµ</td>
          <td><input id="massB" type="number" value="3" min="0.1" step="0.1"></td>
          <td><input id="speedB" type="number" value="3" min="0.1" step="0.1"></td>
        </tr>
      </table>
    </div>
    <canvas id="simCanvas" width="500" height="500"></canvas>
  </div>

  <!-- Right: calculations + vector -->
  <div class="column">
    <div class="calculation" id="calcArea">
      Waiting for collision to display calculations...
    </div>
    <canvas id="triangleCanvas" width="400" height="400"></canvas>
  </div>
</div>

<script>
  const simCanvas = document.getElementById("simCanvas"), simCtx = simCanvas.getContext("2d");
  const triangleCanvas = document.getElementById("triangleCanvas"), triCtx = triangleCanvas.getContext("2d");
  const calcArea = document.getElementById("calcArea");
  let fps = 60, objA, objB, collided, simInterval;

  function drawCircle(ctx,o){
    ctx.beginPath();
    ctx.arc(o.x,o.y,o.radius,0,2*Math.PI);
    ctx.fillStyle=o.color; ctx.fill(); ctx.closePath();
  }

  function drawArrow(ctx,x1,y1,x2,y2,color){
    const hl=10, ang=Math.atan2(y2-y1,x2-x1);
    ctx.beginPath(); ctx.moveTo(x1,y1); ctx.lineTo(x2,y2);
    ctx.strokeStyle=color; ctx.lineWidth=3; ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(x2,y2);
    ctx.lineTo(x2-hl*Math.cos(ang-Math.PI/6), y2-hl*Math.sin(ang-Math.PI/6));
    ctx.lineTo(x2-hl*Math.cos(ang+Math.PI/6), y2-hl*Math.sin(ang+Math.PI/6));
    ctx.closePath(); ctx.fillStyle=color; ctx.fill();
  }

  function startSimulation(){
    clearInterval(simInterval);
    simCtx.clearRect(0,0,simCanvas.width,simCanvas.height);
    calcArea.textContent="Waiting for collision to display calculations...";
    const mA=+document.getElementById("massA").value,
          vA=+document.getElementById("speedA").value,
          mB=+document.getElementById("massB").value,
          vB=+document.getElementById("speedB").value;

    const ppm=60,
          pXA=vA*ppm/fps,
          pXB=vB*ppm/fps,
          ctr=simCanvas.width/2,
          t=ctr/(Math.min(vA,vB)*ppm),
          dA=vA*t*ppm,
          dB=vB*t*ppm;

    objA={x:ctr,y:ctr-dA,vx:0,vy:pXA,color:"red",mass:mA,radius:20};
    objB={x:ctr-dB,y:ctr,vx:pXB,vy:0,color:"blue",mass:mB,radius:20};
    collided=false;
    drawVectorTriangle(mA,vA,mB,vB);
    simInterval=setInterval(()=>update(mA,vA,mB,vB),1000/fps);
  }

  function update(mA,vA,mB,vB){
    simCtx.clearRect(0,0,simCanvas.width,simCanvas.height);
    if(!collided){
      objA.y+=objA.vy; objB.x+=objB.vx;
      drawCircle(simCtx,objA); drawCircle(simCtx,objB);
      if(Math.hypot(objA.x-objB.x,objA.y-objB.y) < objA.radius+objB.radius){
        collided=true;
        const pAy=mA*vA, pBx=mB*vB, pTot=Math.hypot(pAy,pBx),
              vAfter=pTot/(mA+mB),
              angDeg=Math.atan2(pBx,pAy)*180/Math.PI,
              vx=(pBx/pTot)*vAfter*60/fps,
              vy=(pAy/pTot)*vAfter*60/fps;
        calcArea.textContent=
`Momentum Before Collision:
  üî¥ Red:  p = m √ó v = ${mA} √ó ${vA} = ${pAy.toFixed(2)}‚ÄØkg¬∑m‚ÄØs‚Åª¬π
  üîµ Blue: p = m √ó v = ${mB} √ó ${vB} = ${pBx.toFixed(2)}‚ÄØkg¬∑m‚ÄØs‚Åª¬π

Resultant Momentum:
  p = ‚àö(p‚Çì¬≤ + p·µß¬≤) = ‚àö(${pBx.toFixed(2)}¬≤ + ${pAy.toFixed(2)}¬≤)
    = ${pTot.toFixed(2)}‚ÄØkg¬∑m‚ÄØs‚Åª¬π

Speed After Collision:
  v = p / m = ${pTot.toFixed(2)} / ${(mA+mB).toFixed(2)}
    = ${vAfter.toFixed(2)}‚ÄØm‚ÄØs‚Åª¬π

Angle of Travel:
  Œ∏ = tan‚Åª¬π(p‚Çì / p·µß) = tan‚Åª¬π(${pBx.toFixed(2)} / ${pAy.toFixed(2)})
    = ${angDeg.toFixed(2)}¬∞`;
        combined={x:objA.x,y:objA.y,vx,vy,color:"purple",radius:30};
      }
    } else {
      combined.x+=combined.vx; combined.y+=combined.vy;
      drawCircle(simCtx,combined);
    }
  }

  function drawVectorTriangle(mA,vA,mB,vB){
    triCtx.clearRect(0,0,triangleCanvas.width,triangleCanvas.height);
    const pAy=mA*vA, pBx=mB*vB,
          maxL=Math.max(pAy,pBx), mg=40,
          sc=(triangleCanvas.height-mg*2)/maxL,
          yS=pAy*sc, xS=pBx*sc,
          oX=40,oY=50;
    drawArrow(triCtx,oX,oY,oX,oY+yS,"red");
    drawArrow(triCtx,oX,oY+yS,oX+xS,oY+yS,"blue");
    drawArrow(triCtx,oX,oY,oX+xS,oY+yS,"purple");
    triCtx.beginPath();
    triCtx.moveTo(oX,oY); triCtx.lineTo(oX,oY+yS); triCtx.lineTo(oX+xS,oY+yS);
    triCtx.closePath(); triCtx.strokeStyle="#555"; triCtx.setLineDash([5,5]); triCtx.stroke();
    triCtx.setLineDash([]);
  }
</script>

</body>
</html>
